# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr

# VS Code
.vscode/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Linux
*~

# Temporary files
*.tmp
*.temp
*.swp
*.swo

# Logs
*.log
logs/

# Database
*.db
*.sqlite
*.sqlite3

# Node.js (if using any frontend build tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE files
.idea/
*.iml
*.ipr
*.iws

# Project specific
# API keys and sensitive configuration
.env.local
.env.production
.env.development
# Only ignore the root-level config.py; allow package modules like app/routes/api/config.py
/config.py
secrets.json
session.json

# Development and testing files
debug_*.py
test_*.py
*_test.py
test_*/
optimize_*.py
run_app.py

# Documentation drafts and summaries
*_SUMMARY.md
*_FIXES.md
*_STATUS.md
*_IMPLEMENTATION.md
CURRENT_*.md
API_FIXES_SUMMARY.md
ASSEMBLYAI_*.md
CLEANUP_SUMMARY.md
CORRECTED_SERVICE_ARCHITECTURE.md
FILE_UPLOAD_FIXES.md
FULL_FUNCTIONALITY_SUMMARY.md
INTEGRATION_TESTING_SUMMARY.md
LOADING_STATUS_AND_GEMINI_FIXES.md
PERFORMANCE_IMPROVEMENTS.md
REFACTORING_SUMMARY.md
RUNTIME_FIXES_SUMMARY.md
SLAM1_KEYTERMS_IMPLEMENTATION.md
STARTUP_*.md
SYNTAX_FIXES_SUMMARY.md
TASK_8_IMPLEMENTATION_SUMMARY.md
UI_UX_IMPROVEMENTS_SUMMARY.md
UNIT_TESTS_IMPLEMENTATION_SUMMARY.md

# Development tools and configs
.kiro/
nginx_optimized.conf
requirements_optimized.txt
deployment_test.py

# Static file backups and development versions
static/*backup*
static/*original*
static/app-original-backup.js
static/config.js
static/dev-sample-data.js
static/empty-state-manager.js
static/help-system.js
static/instant_hide.js
static/loading_diagnostic.js
static/page_debug.js
static/startup_*.js

# Template backups and test files
templates/*backup*
templates/*test*
templates/*debug*
templates/*minimal*
templates/*working*
templates/*simple*
templates/*bare*
templates/browser_test.html
templates/debug_*.html
templates/fixed_main.html
templates/js_debug.html
templates/minimal_diagnostic.html
templates/simple_*.html
templates/test.html
templates/working_test.html

# Legacy API structure (replaced by modular app/)
# Restrict to root-level paths so nested packages like app/routes/api are tracked
/api/
/functions/
/public/

# Test files
test_*.py
tests/

# Uploaded files
uploads/
temp/

# Cache directories
.cache/
.parcel-cache/

# Coverage reports
htmlcov/
.coverage

# Testing
.pytest_cache/
.tox/

# Documentation builds
docs/_build/
